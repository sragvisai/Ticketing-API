{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nsrag\\\\OneDrive\\\\Desktop\\\\Projects\\\\Zendesk\\\\my-api\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`; // Add a list of allowed origins.\n// If you have more origins you would like to add, you can add them to the array below.\n\nconst lst = [];\nlet desc = [];\n\nconst populateData = data => {\n  lst.push(data); //console.log(lst[0].count);\n};\n\nconst adddes = data => {\n  for (let i = 0; i < Number(10); i++) {\n    console.log('hi');\n    desc.push(data[i].description);\n  }\n};\n\nfunction App() {\n  _s();\n\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState(null);\n  let [responseCount, setResponseCount] = React.useState('');\n  useEffect(() => {\n    //async function getdata() {\n    console.log(\"Inside the getdata\");\n    axios.get('https://zccsragviletstry.zendesk.com/api/v2/tickets.json', {\n      headers: {\n        Authorization: authorization\n      }\n    }).then(response => {\n      // console.log('clear');\n      // console.log('response', response.data);\n      // populateData(response.data);\n      // console.log('count', response.data.count);\n      // //lets store the # of tickets being retrieved\n      // setResponseCount(response.data.count);\n      // //lets store the tickets\n      // setResponseData(response.data.tickets);\n      // //const count = response.data.count;\n      // console.log('hello' + JSON.stringify(responseData));\n      // console.log(\"Type\" + typeof (response.data.tickets[0].description));\n      // adddes(response.data.tickets);\n      // //console.log('Response ticket'+resp);\n      return response.data;\n    }).then(odata => {\n      setResponseData(odata);\n      console.log(responseData);\n    });\n  }, []); //for(let i = 0 ; i <Number( responseCount) ; i++){\n  //console.log('hi');\n  //desc.push(responseData.tickets[i].description)\n  //}\n  // const list = responseData.map((responseData) => \n  // <li>{responseData}</li>\n  // )\n  // ReactDOM.render(\n  //   <p>Hello</p> , \n  //   document.getElementById('root')\n  // // );\n  // const SkipAny: string [] = responseData[0];\n  //plan is to create string arrays to store the descriptions and subject every single object\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [responseData && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"We have a total of #\", responseData.count, \" tickets being retrieved\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Here \", desc]\n        }, desc.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ZKHfVkvf5rBMdYJ5jDvTBAWACDA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/nsrag/OneDrive/Desktop/Projects/Zendesk/my-api/src/App.tsx"],"names":["React","useEffect","axios","username","password","encodedBase64Token","Buffer","from","toString","authorization","lst","desc","populateData","data","push","adddes","i","Number","console","log","description","App","responseData","setResponseData","useState","responseCount","setResponseCount","get","headers","Authorization","then","response","odata","count"],"mappings":";;;AAAA,OAAOA,KAAP,IAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAqC,OAArC;;AAMA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,QAAQ,GAAG,YAAjB;AACA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAa,GAAEJ,QAAS,IAAGC,QAAS,EAApC,EAAuCI,QAAvC,CAAgD,QAAhD,CAA3B;AACA,MAAMC,aAAa,GAAI,SAAQJ,kBAAmB,EAAlD,C,CAGA;AACA;;AACA,MAAMK,GAAU,GAAG,EAAnB;AACA,IAAIC,IAAc,GAAG,EAArB;;AACA,MAAMC,YAAY,GAAIC,IAAD,IAAe;AAClCH,EAAAA,GAAG,CAACI,IAAJ,CAASD,IAAT,EADkC,CAElC;AACD,CAHD;;AAIA,MAAME,MAAM,GAAIF,IAAD,IAAe;AAC5B,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAAM,CAAC,EAAD,CAA1B,EAAgCD,CAAC,EAAjC,EAAqC;AACnCE,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAR,IAAAA,IAAI,CAACG,IAAL,CAAUD,IAAI,CAACG,CAAD,CAAJ,CAAQI,WAAlB;AACD;AACF,CALD;;AAOA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCvB,KAAK,CAACwB,QAAN,CAAe,IAAf,CAAxC;AACA,MAAI,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC1B,KAAK,CAACwB,QAAN,CAAe,EAAf,CAAxC;AAGAvB,EAAAA,SAAS,CAAC,MAAM;AACd;AAEAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAjB,IAAAA,KAAK,CAACyB,GAAN,CAAU,0DAAV,EAAsE;AACpEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEpB;AADR;AAD2D,KAAtE,EAMGqB,IANH,CAMSC,QAAD,IAA6B;AAEjC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,aAAOA,QAAQ,CAAClB,IAAhB;AACD,KAxBH,EAyBGiB,IAzBH,CAyBQE,KAAK,IAAG;AACZT,MAAAA,eAAe,CAACS,KAAD,CAAf;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ;AACD,KA5BH;AA6BD,GAjCQ,EAiCP,EAjCO,CAAT,CANa,CA0Cb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,iBACGA,YAAY,iBAAI;AAAA,2CACMA,YAAY,CAACW,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA,cADnB,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,+BACA;AAAA,8BACctB,IADd;AAAA,WAAWA,IAAI,CAACH,QAAL,EAAX;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAzEQa,G;;KAAAA,G;AA2ET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { User } from \"./interfaces\";\nimport axios, { AxiosResponse } from \"axios\";\nimport express, { response } from 'express';\nimport cors from 'cors';\nimport ReactDOM from 'react-dom';\n\n\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`;\n\n\n// Add a list of allowed origins.\n// If you have more origins you would like to add, you can add them to the array below.\nconst lst: any[] = [];\nlet desc: string[] = [];\nconst populateData = (data: any) => {\n  lst.push(data);\n  //console.log(lst[0].count);\n}\nconst adddes = (data: any) => {\n  for (let i = 0; i < Number(10); i++) {\n    console.log('hi');\n    desc.push(data[i].description);\n  }\n}\n\nfunction App() {\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState(null);\n  let [responseCount, setResponseCount] = React.useState('');\n\n\n  useEffect(() => {\n    //async function getdata() {\n      \n    console.log(\"Inside the getdata\");\n    axios.get('https://zccsragviletstry.zendesk.com/api/v2/tickets.json', {\n      headers: {\n        Authorization: authorization,\n      },\n    })\n  \n      .then((response: AxiosResponse) => {\n\n        // console.log('clear');\n        // console.log('response', response.data);\n        // populateData(response.data);\n        // console.log('count', response.data.count);\n        // //lets store the # of tickets being retrieved\n        // setResponseCount(response.data.count);\n\n        // //lets store the tickets\n        // setResponseData(response.data.tickets);\n\n        // //const count = response.data.count;\n        // console.log('hello' + JSON.stringify(responseData));\n        // console.log(\"Type\" + typeof (response.data.tickets[0].description));\n        // adddes(response.data.tickets);\n        // //console.log('Response ticket'+resp);\n        return response.data;\n      })\n      .then(odata =>{\n        setResponseData(odata);\n        console.log(responseData);\n      });\n  },[]);\n\n\n  //for(let i = 0 ; i <Number( responseCount) ; i++){\n  //console.log('hi');\n  //desc.push(responseData.tickets[i].description)\n  //}\n  // const list = responseData.map((responseData) => \n  // <li>{responseData}</li>\n  // )\n  // ReactDOM.render(\n  //   <p>Hello</p> , \n  //   document.getElementById('root')\n  // // );\n  // const SkipAny: string [] = responseData[0];\n\n\n  //plan is to create string arrays to store the descriptions and subject every single object\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {responseData && <h1 >\n          We have a total of #{responseData.count} tickets being retrieved\n        </h1>}\n        <p>Hello</p>\n        <ul>\n        <li key = {desc.toString()}>\n                Here {desc}\n              </li>\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}