{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = void 0;\n\nvar mergeAll_1 = require(\"../operators/mergeAll\");\n\nvar innerFrom_1 = require(\"./innerFrom\");\n\nvar empty_1 = require(\"./empty\");\n\nvar args_1 = require(\"../util/args\");\n\nvar from_1 = require(\"./from\");\n\nfunction merge() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = args_1.popScheduler(args);\n  var concurrent = args_1.popNumber(args, Infinity);\n  var sources = args;\n  return !sources.length ? empty_1.EMPTY : sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));\n}\n\nexports.merge = merge;","map":{"version":3,"sources":["../../../../src/internal/observable/merge.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAgFA,SAAgB,KAAhB,GAAqB;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA8D;AAA9D,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACpB,MAAM,SAAS,GAAG,MAAA,CAAA,YAAA,CAAa,IAAb,CAAlB;AACA,MAAM,UAAU,GAAG,MAAA,CAAA,SAAA,CAAU,IAAV,EAAgB,QAAhB,CAAnB;AACA,MAAM,OAAO,GAAG,IAAhB;AACA,SAAO,CAAC,OAAO,CAAC,MAAT,GAEH,OAAA,CAAA,KAFG,GAGH,OAAO,CAAC,MAAR,KAAmB,CAAnB,GAEA,WAAA,CAAA,SAAA,CAAU,OAAO,CAAC,CAAD,CAAjB,CAFA,GAIA,UAAA,CAAA,QAAA,CAAS,UAAT,EAAqB,MAAA,CAAA,IAAA,CAAK,OAAL,EAAc,SAAd,CAArB,CAPJ;AAQD;;AAZD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nvar mergeAll_1 = require(\"../operators/mergeAll\");\nvar innerFrom_1 = require(\"./innerFrom\");\nvar empty_1 = require(\"./empty\");\nvar args_1 = require(\"../util/args\");\nvar from_1 = require(\"./from\");\nfunction merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args_1.popScheduler(args);\n    var concurrent = args_1.popNumber(args, Infinity);\n    var sources = args;\n    return !sources.length\n        ?\n            empty_1.EMPTY\n        : sources.length === 1\n            ?\n                innerFrom_1.innerFrom(sources[0])\n            :\n                mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"script"}