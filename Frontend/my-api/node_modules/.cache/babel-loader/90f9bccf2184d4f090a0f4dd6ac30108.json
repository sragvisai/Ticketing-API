{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multicast = void 0;\n\nvar ConnectableObservable_1 = require(\"../observable/ConnectableObservable\");\n\nvar isFunction_1 = require(\"../util/isFunction\");\n\nvar connect_1 = require(\"./connect\");\n\nfunction multicast(subjectOrSubjectFactory, selector) {\n  var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () {\n    return subjectOrSubjectFactory;\n  };\n\n  if (isFunction_1.isFunction(selector)) {\n    return connect_1.connect(selector, {\n      connector: subjectFactory\n    });\n  }\n\n  return function (source) {\n    return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory);\n  };\n}\n\nexports.multicast = multicast;","map":{"version":3,"sources":["../../../../src/internal/operators/multicast.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AA4EA,SAAgB,SAAhB,CACE,uBADF,EAEE,QAFF,EAEqD;AAEnD,MAAM,cAAc,GAAG,YAAA,CAAA,UAAA,CAAW,uBAAX,IAAsC,uBAAtC,GAAgE,YAAA;AAAM,WAAA,uBAAA;AAAuB,GAApH;;AAEA,MAAI,YAAA,CAAA,UAAA,CAAW,QAAX,CAAJ,EAA0B;AAIxB,WAAO,SAAA,CAAA,OAAA,CAAQ,QAAR,EAAkB;AACvB,MAAA,SAAS,EAAE;AADY,KAAlB,CAAP;AAGD;;AAED,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,IAAI,uBAAA,CAAA,qBAAJ,CAA+B,MAA/B,EAAA,cAAA,CAAA;AAAsD,GAAxF;AACD;;AAhBD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.multicast = void 0;\nvar ConnectableObservable_1 = require(\"../observable/ConnectableObservable\");\nvar isFunction_1 = require(\"../util/isFunction\");\nvar connect_1 = require(\"./connect\");\nfunction multicast(subjectOrSubjectFactory, selector) {\n    var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };\n    if (isFunction_1.isFunction(selector)) {\n        return connect_1.connect(selector, {\n            connector: subjectFactory,\n        });\n    }\n    return function (source) { return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory); };\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"script"}