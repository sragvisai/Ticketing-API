{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operate = exports.hasLift = void 0;\n\nvar isFunction_1 = require(\"./isFunction\");\n\nfunction hasLift(source) {\n  return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\n\nexports.hasLift = hasLift;\n\nfunction operate(init) {\n  return function (source) {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n\nexports.operate = operate;","map":{"version":3,"sources":["../../../../src/internal/util/lift.ts"],"names":[],"mappings":";;;;;;;AAGA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAKA,SAAgB,OAAhB,CAAwB,MAAxB,EAAmC;AACjC,SAAO,YAAA,CAAA,UAAA,CAAW,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAnB,CAAP;AACD;;AAFD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAQA,SAAgB,OAAhB,CACE,IADF,EACuF;AAErF,SAAO,UAAC,MAAD,EAAsB;AAC3B,QAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,aAAO,MAAM,CAAC,IAAP,CAAY,UAA+B,YAA/B,EAA0D;AAC3E,YAAI;AACF,iBAAO,IAAI,CAAC,YAAD,EAAe,IAAf,CAAX;AACD,SAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAK,KAAL,CAAW,GAAX;AACD;AACF,OANM,CAAP;AAOD;;AACD,UAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;AACD,GAXD;AAYD;;AAfD,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.operate = exports.hasLift = void 0;\nvar isFunction_1 = require(\"./isFunction\");\nfunction hasLift(source) {\n    return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexports.hasLift = hasLift;\nfunction operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\nexports.operate = operate;\n//# sourceMappingURL=lift.js.map"]},"metadata":{},"sourceType":"script"}