{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nsrag\\\\OneDrive\\\\Desktop\\\\Projects\\\\Zendesk\\\\my-api\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`; //let individualData = false;\n\nfunction App2() {\n  _s();\n\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading, setLoading] = useState(false); //as we are looking to start with the first page\n\n  const [currentPage, setCurrentPage] = useState(1); //setting the number of lists per page\n\n  const [postsperPage, setpostsPerPage] = useState(25);\n  const [individualData, setindividualData] = useState(false); //change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); //get data\n\n\n  const getdata = pagenumber => {\n    console.log(\"here\");\n    setindividualData(true);\n  };\n\n  useEffect(() => {\n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization\n      }\n    }).then(response => {\n      console.log(\"Response receieved\" + response.data);\n      return response.data;\n    }).then(odata => {\n      //trying passing the array here itself\n      setResponseData(odata); //console.log(responseData);\n    });\n    setLoading(false); //setting the dependency array to empty\n  }, []);\n  const indexoflast = currentPage * postsperPage;\n  const indexoffirst = indexoflast - postsperPage;\n  let currentPosts = [];\n\n  if (responseData != null) {\n    currentPosts = responseData.slice(indexoffirst, indexoflast);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), responseData && /*#__PURE__*/_jsxDEV(List, {\n      requests: currentPosts,\n      loading: loading,\n      getdata: getdata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 22\n    }, this), responseData && /*#__PURE__*/_jsxDEV(Pagination, {\n      postsperPage: postsperPage,\n      totalPosts: responseData.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }, this), individualData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App2, \"vjF29KeQ79kTv7cxGf7i2Yawoq8=\");\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["C:/Users/nsrag/OneDrive/Desktop/Projects/Zendesk/my-api/src/App.tsx"],"names":["React","useState","useEffect","axios","List","Pagination","username","password","encodedBase64Token","Buffer","from","toString","authorization","App2","responseData","setResponseData","loading","setLoading","currentPage","setCurrentPage","postsperPage","setpostsPerPage","individualData","setindividualData","paginate","pageNumber","getdata","pagenumber","console","log","get","headers","Authorization","then","response","data","odata","indexoflast","indexoffirst","currentPosts","slice","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios, { AxiosResponse } from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\n\n\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`;\n//let individualData = false;\n\nfunction App2() {\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading,setLoading] = useState(false);\n  //as we are looking to start with the first page\n  const [ currentPage, setCurrentPage] = useState(1);\n  //setting the number of lists per page\n  const [postsperPage , setpostsPerPage] = useState(25);\n  const [individualData , setindividualData] = useState(false);\n  \n  //change page\n  const paginate = (pageNumber : number) => setCurrentPage(pageNumber);\n\n  //get data\n  const getdata = (pagenumber : number) =>{\n    console.log(\"here\");\n    setindividualData(true);\n  }\n  useEffect(() => {\n    \n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization,\n      },\n    })\n  \n      .then((response: AxiosResponse) => {\n        console.log(\"Response receieved\"+response.data);\n        return response.data;\n      })\n      .then(odata =>{\n        //trying passing the array here itself\n        setResponseData(odata);\n        //console.log(responseData);\n      });\n            \n     setLoading(false);    \n     \n     //setting the dependency array to empty\n  },[]);\n\n  const indexoflast = currentPage * postsperPage ;\n\n  const indexoffirst = indexoflast - postsperPage;\n  let currentPosts : string[] =  [];\n  if(responseData!=null){\n    currentPosts = responseData.slice(indexoffirst,indexoflast);\n  }\n  return (\n    <div className=\"container mt-5\">\n      <h1 className= \"text-primary mb-3\"> \n        Ticket Requests\n      </h1>\n    {responseData && <List requests={currentPosts} loading ={loading} getdata ={getdata}></List>} \n    {responseData && <Pagination postsperPage={postsperPage} totalPosts={responseData.length} paginate={paginate}></Pagination>}\n    {individualData && <p>Hello</p>} \n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}