{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nsrag\\\\OneDrive\\\\Desktop\\\\Projects\\\\Zendesk\\\\my-api\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport IndividualData from './Individualdata';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App2() {\n  _s();\n\n  const [responseData, setResponseData] = useState([]);\n  const [loading, setLoading] = useState(false); //as we are looking to start with the first page\n\n  const [currentPage, setCurrentPage] = useState(1); //setting the number of lists per page\n\n  const [postsperPage, setpostsPerPage] = useState(25); //variables that help to display data about the selected request\n  //setting the initial value to false as we need to show the whole list at firs render\n\n  const [individualData, setindividualData] = useState(false);\n  const [indvidual_index, setindvidual_index] = useState(-1); //to set error status , initially lets set that to false\n\n  const [errorstatus, seterrorstatus] = useState(false);\n  const [errormsg, seterrormsg] = useState('no error'); //change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  const getback = val => {\n    setindividualData(val);\n  }; //sets the indexes for the item to be displayed\n\n\n  const getdata = index => {\n    //set the value to true as we need to show details on a\n    //specific ticket\n    setindividualData(true); //setting the index of the requested ticket details\n\n    setindvidual_index(index);\n  };\n\n  useEffect(() => {\n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/server').then(response => {\n      //console.log(\"Response receieved\"+response.data);\n      return response.data;\n    }).then(odata => {\n      setResponseData(odata);\n    }) //handling errors\n    .catch(error => {\n      // Error\n      seterrorstatus(true);\n\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        // console.log(\"here\");\n        seterrormsg('Observered an issue while retrieving data from server..please check your credentials and try again');\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the \n        // browser and an instance of\n        seterrormsg('Some issue with the request being made..please check again');\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        seterrormsg('Unable to retrieve data please make sure you got everythin right');\n      } // console.log(error.config);\n\n    });\n    setLoading(false); //setting the dependency array to empty\n  }, []);\n  const indexoflast = currentPage * postsperPage;\n  const indexoffirst = indexoflast - postsperPage; //lets slice the data by taking the first and last index\n\n  let currentPosts = [];\n\n  if (responseData != null) {\n    currentPosts = responseData.slice(indexoffirst, indexoflast);\n  }\n\n  const check_ifallgood = () => {\n    if (errorstatus) return false;else {\n      if (!responseData) {\n        seterrormsg(\"The response we got is nothing\");\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [check_ifallgood() && !individualData && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 48\n    }, this), check_ifallgood() && individualData && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 47\n    }, this), !check_ifallgood() && /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-error mb-3\",\n      children: [\" \", errormsg, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 28\n    }, this), check_ifallgood() && !individualData && /*#__PURE__*/_jsxDEV(List, {\n      requests: currentPosts,\n      loading: loading,\n      getdata: getdata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 46\n    }, this), check_ifallgood() && !individualData && /*#__PURE__*/_jsxDEV(Pagination, {\n      postsperPage: postsperPage,\n      totalPosts: responseData.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 46\n    }, this), check_ifallgood() && individualData && /*#__PURE__*/_jsxDEV(IndividualData, {\n      index: indvidual_index,\n      home: getback,\n      data: responseData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App2, \"q1x2buBVmKpI8LYcjbuzsIvulLE=\");\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["C:/Users/nsrag/OneDrive/Desktop/Projects/Zendesk/my-api/src/App.tsx"],"names":["React","useState","useEffect","axios","List","Pagination","IndividualData","App2","responseData","setResponseData","loading","setLoading","currentPage","setCurrentPage","postsperPage","setpostsPerPage","individualData","setindividualData","indvidual_index","setindvidual_index","errorstatus","seterrorstatus","errormsg","seterrormsg","paginate","pageNumber","getback","val","getdata","index","get","then","response","data","odata","catch","error","request","indexoflast","indexoffirst","currentPosts","slice","check_ifallgood","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios, { AxiosResponse } from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport IndividualData from './Individualdata';\n\nfunction App2() {\n  const [responseData, setResponseData] = useState([]);\n  const [loading,setLoading] = useState(false);\n\n  //as we are looking to start with the first page\n  const [ currentPage, setCurrentPage] = useState(1);\n\n  //setting the number of lists per page\n  const [postsperPage , setpostsPerPage] = useState(25);\n\n  //variables that help to display data about the selected request\n  //setting the initial value to false as we need to show the whole list at firs render\n  const [individualData , setindividualData] = useState(false);\n  const [indvidual_index , setindvidual_index] = useState(-1);\n\n  //to set error status , initially lets set that to false\n  const [errorstatus , seterrorstatus] = useState(false);\n  const[errormsg , seterrormsg] = useState('no error');\n\n  //change page\n  const paginate = (pageNumber : number) => setCurrentPage(pageNumber);\n  const getback = (val : boolean) =>{\n    setindividualData(val);\n  }\n\n  //sets the indexes for the item to be displayed\n  const getdata = (index : number) =>{\n    //set the value to true as we need to show details on a\n    //specific ticket\n    setindividualData(true);\n    \n    //setting the index of the requested ticket details\n    setindvidual_index(index);\n  }\n\n  useEffect(() => {\n    \n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/server')\n  \n      .then((response: AxiosResponse) => {\n        //console.log(\"Response receieved\"+response.data);\n        return response.data;\n      })\n\n      .then(odata =>{\n        setResponseData(odata);\n      })\n\n      //handling errors\n      .catch((error) => {\n        // Error\n        seterrorstatus (true);\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            // console.log(\"here\");\n            seterrormsg('Observered an issue while retrieving data from server..please check your credentials and try again');\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the \n            // browser and an instance of\n            seterrormsg('Some issue with the request being made..please check again');\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            seterrormsg('Unable to retrieve data please make sure you got everythin right');\n        }\n        // console.log(error.config);\n      });\n      \n            \n     setLoading(false);    \n     \n     //setting the dependency array to empty\n  },[]);\n\n  const indexoflast = currentPage * postsperPage ;\n  const indexoffirst = indexoflast - postsperPage;\n\n  //lets slice the data by taking the first and last index\n  let currentPosts : string[] =  [];\n  if(responseData!=null){\n    currentPosts = responseData.slice(indexoffirst,indexoflast);\n  }\n\n  const check_ifallgood = () =>{\n    \n    if(errorstatus)\n    return false;\n    else{\n      if(!responseData){\n        seterrormsg(\"The response we got is nothing\");\n        return false;\n      }\n      \n    }\n\n    return true;\n  }\n  return (\n    <div className=\"container mt-5\">\n      {check_ifallgood() && !individualData && <h1 className= \"text-primary mb-3\"> \n        Ticket Requests\n      </h1>}\n      {check_ifallgood() && individualData && <h1 className= \"text-primary mb-3\"> \n        Ticket Details\n      </h1>}\n    {!check_ifallgood() && <h3 className = \"text-error mb-3\"> {errormsg} </h3>}\n    {check_ifallgood() && !individualData && <List requests={currentPosts} loading ={loading} getdata ={getdata}></List>} \n    {check_ifallgood() && !individualData && <Pagination postsperPage={postsperPage} totalPosts={responseData.length} paginate={paginate}></Pagination>}\n    {check_ifallgood() && individualData && <IndividualData index ={indvidual_index} home = {getback} data ={responseData} ></IndividualData>} \n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}