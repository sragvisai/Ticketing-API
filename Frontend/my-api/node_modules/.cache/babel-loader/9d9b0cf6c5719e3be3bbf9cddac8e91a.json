{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.repeatWhen = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nfunction repeatWhen(notifier) {\n  return lift_1.operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n\n    var checkComplete = function () {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n\n    var getCompletionSubject = function () {\n      if (!completions$) {\n        completions$ = new Subject_1.Subject();\n        notifier(completions$).subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n\n      return completions$;\n    };\n\n    var subscribeForRepeatWhen = function () {\n      isMainComplete = false;\n      innerSub = source.subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n\n    subscribeForRepeatWhen();\n  });\n}\n\nexports.repeatWhen = repeatWhen;","map":{"version":3,"sources":["../../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAIA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AA+BA,SAAgB,UAAhB,CAA8B,QAA9B,EAA4F;AAC1F,SAAO,MAAA,CAAA,OAAA,CAAQ,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,QAAJ;AACA,QAAI,SAAS,GAAG,KAAhB;AACA,QAAI,YAAJ;AACA,QAAI,kBAAkB,GAAG,KAAzB;AACA,QAAI,cAAc,GAAG,KAArB;;AAKA,QAAM,aAAa,GAAG,YAAA;AAAM,aAAA,cAAc,IAAI,kBAAlB,KAAyC,UAAU,CAAC,QAAX,IAAzC,IAAA,CAAA;AAAqE,KAAjG;;AAKA,QAAM,oBAAoB,GAAG,YAAA;AAC3B,UAAI,CAAC,YAAL,EAAmB;AACjB,QAAA,YAAY,GAAG,IAAI,SAAA,CAAA,OAAJ,EAAf;AAIA,QAAA,QAAQ,CAAC,YAAD,CAAR,CAAuB,SAAvB,CACE,IAAI,oBAAA,CAAA,kBAAJ,CACE,UADF,EAEE,YAAA;AACE,cAAI,QAAJ,EAAc;AACZ,YAAA,sBAAsB;AACvB,WAFD,MAEO;AAKL,YAAA,SAAS,GAAG,IAAZ;AACD;AACF,SAZH,EAaE,YAAA;AACE,UAAA,kBAAkB,GAAG,IAArB;AACA,UAAA,aAAa;AACd,SAhBH,CADF;AAoBD;;AACD,aAAO,YAAP;AACD,KA5BD;;AA8BA,QAAM,sBAAsB,GAAG,YAAA;AAC7B,MAAA,cAAc,GAAG,KAAjB;AAEA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,UAAvB,EAAmC,SAAnC,EAA8C,YAAA;AAC5C,QAAA,cAAc,GAAG,IAAjB;AAMA,SAAC,aAAa,EAAd,IAAoB,oBAAoB,GAAG,IAAvB,EAApB;AACD,OARD,CADS,CAAX;;AAYA,UAAI,SAAJ,EAAe;AAKb,QAAA,QAAQ,CAAC,WAAT;AAIA,QAAA,QAAQ,GAAG,IAAX;AAEA,QAAA,SAAS,GAAG,KAAZ;AAEA,QAAA,sBAAsB;AACvB;AACF,KA9BD;;AAiCA,IAAA,sBAAsB;AACvB,GA/EM,CAAP;AAgFD;;AAjFD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.repeatWhen = void 0;\nvar Subject_1 = require(\"../Subject\");\nvar lift_1 = require(\"../util/lift\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nfunction repeatWhen(notifier) {\n    return lift_1.operate(function (source, subscriber) {\n        var innerSub;\n        var syncResub = false;\n        var completions$;\n        var isNotifierComplete = false;\n        var isMainComplete = false;\n        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };\n        var getCompletionSubject = function () {\n            if (!completions$) {\n                completions$ = new Subject_1.Subject();\n                notifier(completions$).subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, function () {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, function () {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        var subscribeForRepeatWhen = function () {\n            isMainComplete = false;\n            innerSub = source.subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, undefined, function () {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"script"}