{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nsrag\\\\OneDrive\\\\Desktop\\\\Projects\\\\Zendesk\\\\my-api\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport IndividualData from './Individualdata';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`;\n\nfunction App2() {\n  _s();\n\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading, setLoading] = useState(false); //as we are looking to start with the first page\n\n  const [currentPage, setCurrentPage] = useState(1); //setting the number of lists per page\n\n  const [postsperPage, setpostsPerPage] = useState(25); //variables that help to display data about the selected request\n  //setting the initial value to false as we need to show the whole list at firs render\n\n  const [individualData, setindividualData] = useState(false);\n  const [indvidual_index, setindvidual_index] = useState(-1); //to set error status , initially lets set that to false\n\n  const [errorstatus, seterrorstatus] = useState(false);\n  const [errormsg, seterrormsg] = useState('no error'); //change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  const getback = val => {\n    setindividualData(val);\n  }; //sets the indexes for the item to be displayed\n\n\n  const getdata = index => {\n    //set the value to true as we need to show details on a\n    //specific ticket\n    setindividualData(true); //setting the index of the requested ticket details\n\n    setindvidual_index(index);\n  };\n\n  useEffect(() => {\n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization\n      }\n    }).then(response => {\n      //console.log(\"Response receieved\"+response.data);\n      return response.data;\n    }).then(odata => {\n      setResponseData(odata);\n    }) //handling errors\n    .catch(error => {\n      // Error\n      seterrorstatus(true);\n\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(\"here\");\n        seterrormsg(' Observered an issue while retrieving data from server');\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the \n        // browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(\"there\");\n        console.log(error.request);\n        seterrormsg('Some issue with the request being made');\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n        seterrormsg('Unable to retrieve data please make sure you got everythin right');\n      }\n\n      console.log(error.config);\n    });\n    setLoading(false); //setting the dependency array to empty\n  }, []);\n  const indexoflast = currentPage * postsperPage;\n  const indexoffirst = indexoflast - postsperPage; //lets slice the data by taking the first and last index\n\n  let currentPosts = [];\n\n  if (responseData != null) {\n    currentPosts = responseData.slice(indexoffirst, indexoflast);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [!errorstatus && !individualData && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 43\n    }, this), !errorstatus && individualData && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 42\n    }, this), errorstatus && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-error mb-3\",\n      children: [\" \", errormsg, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 23\n    }, this), !individualData && responseData && /*#__PURE__*/_jsxDEV(List, {\n      requests: currentPosts,\n      loading: loading,\n      getdata: getdata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 41\n    }, this), !individualData && responseData && /*#__PURE__*/_jsxDEV(Pagination, {\n      postsperPage: postsperPage,\n      totalPosts: responseData.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }, this), individualData && responseData && /*#__PURE__*/_jsxDEV(IndividualData, {\n      index: indvidual_index,\n      home: getback,\n      data: responseData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 40\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App2, \"q1x2buBVmKpI8LYcjbuzsIvulLE=\");\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["C:/Users/nsrag/OneDrive/Desktop/Projects/Zendesk/my-api/src/App.tsx"],"names":["React","useState","useEffect","axios","List","Pagination","IndividualData","username","password","encodedBase64Token","Buffer","from","toString","authorization","App2","responseData","setResponseData","loading","setLoading","currentPage","setCurrentPage","postsperPage","setpostsPerPage","individualData","setindividualData","indvidual_index","setindvidual_index","errorstatus","seterrorstatus","errormsg","seterrormsg","paginate","pageNumber","getback","val","getdata","index","get","headers","Authorization","then","response","data","odata","catch","error","console","log","request","message","config","indexoflast","indexoffirst","currentPosts","slice","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAqC,OAArC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAGA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,QAAQ,GAAG,YAAjB;AACA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAa,GAAEJ,QAAS,IAAGC,QAAS,EAApC,EAAuCI,QAAvC,CAAgD,QAAhD,CAA3B;AACA,MAAMC,aAAa,GAAI,SAAQJ,kBAAmB,EAAlD;;AAEA,SAASK,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,KAAK,CAACC,QAAN,CAAe,EAAf,CAAxC;AACA,QAAM,CAACgB,OAAD,EAASC,UAAT,IAAuBjB,QAAQ,CAAC,KAAD,CAArC,CAFc,CAId;;AACA,QAAM,CAAEkB,WAAF,EAAeC,cAAf,IAAiCnB,QAAQ,CAAC,CAAD,CAA/C,CALc,CAOd;;AACA,QAAM,CAACoB,YAAD,EAAgBC,eAAhB,IAAmCrB,QAAQ,CAAC,EAAD,CAAjD,CARc,CAUd;AACA;;AACA,QAAM,CAACsB,cAAD,EAAkBC,iBAAlB,IAAuCvB,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAACwB,eAAD,EAAmBC,kBAAnB,IAAyCzB,QAAQ,CAAC,CAAC,CAAF,CAAvD,CAbc,CAed;;AACA,QAAM,CAAC0B,WAAD,EAAeC,cAAf,IAAiC3B,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAK,CAAC4B,QAAD,EAAYC,WAAZ,IAA2B7B,QAAQ,CAAC,UAAD,CAAxC,CAjBc,CAmBd;;AACA,QAAM8B,QAAQ,GAAIC,UAAD,IAAyBZ,cAAc,CAACY,UAAD,CAAxD;;AACA,QAAMC,OAAO,GAAIC,GAAD,IAAkB;AAChCV,IAAAA,iBAAiB,CAACU,GAAD,CAAjB;AACD,GAFD,CArBc,CAyBd;;;AACA,QAAMC,OAAO,GAAIC,KAAD,IAAmB;AACjC;AACA;AACAZ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB,CAHiC,CAKjC;;AACAE,IAAAA,kBAAkB,CAACU,KAAD,CAAlB;AACD,GAPD;;AASAlC,EAAAA,SAAS,CAAC,MAAM;AAEd;AACAgB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAf,IAAAA,KAAK,CAACkC,GAAN,CAAU,4BAAV,EAAwC;AACtCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE1B;AADR;AAD6B,KAAxC,EAMG2B,IANH,CAMSC,QAAD,IAA6B;AACjC;AACA,aAAOA,QAAQ,CAACC,IAAhB;AACD,KATH,EAWGF,IAXH,CAWQG,KAAK,IAAG;AACZ3B,MAAAA,eAAe,CAAC2B,KAAD,CAAf;AACD,KAbH,EAeE;AAfF,KAgBGC,KAhBH,CAgBUC,KAAD,IAAW;AAChB;AACAjB,MAAAA,cAAc,CAAE,IAAF,CAAd;;AACA,UAAIiB,KAAK,CAACJ,QAAV,EAAoB;AAChB;AACA;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAjB,QAAAA,WAAW,CAAC,wDAAD,CAAX;AACH,OALD,MAKO,IAAIe,KAAK,CAACG,OAAV,EAAmB;AACtB;AACA;AACA;AACA;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAlB,QAAAA,WAAW,CAAC,wCAAD,CAAX;AACH,OARM,MAQA;AACH;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACI,OAA3B;AACAnB,QAAAA,WAAW,CAAC,kEAAD,CAAX;AACH;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,MAAlB;AACD,KAtCH;AAyCChC,IAAAA,UAAU,CAAC,KAAD,CAAV,CA7Ca,CA+Cb;AACF,GAhDQ,EAgDP,EAhDO,CAAT;AAkDA,QAAMiC,WAAW,GAAGhC,WAAW,GAAGE,YAAlC;AACA,QAAM+B,YAAY,GAAGD,WAAW,GAAG9B,YAAnC,CAtFc,CAwFd;;AACA,MAAIgC,YAAuB,GAAI,EAA/B;;AACA,MAAGtC,YAAY,IAAE,IAAjB,EAAsB;AACpBsC,IAAAA,YAAY,GAAGtC,YAAY,CAACuC,KAAb,CAAmBF,YAAnB,EAAgCD,WAAhC,CAAf;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACG,CAACxB,WAAD,IAAgB,CAACJ,cAAjB,iBAAmC;AAAI,MAAA,SAAS,EAAE,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADtC,EAIG,CAACI,WAAD,IAAgBJ,cAAhB,iBAAkC;AAAI,MAAA,SAAS,EAAE,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJrC,EAOGI,WAAW,iBAAI;AAAI,MAAA,SAAS,EAAG,iBAAhB;AAAA,sBAAoCE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPlB,EAQC,CAACN,cAAD,IAAmBR,YAAnB,iBAAmC,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEsC,YAAhB;AAA8B,MAAA,OAAO,EAAGpC,OAAxC;AAAiD,MAAA,OAAO,EAAGkB;AAA3D;AAAA;AAAA;AAAA;AAAA,YARpC,EASC,CAACZ,cAAD,IAAmBR,YAAnB,iBAAmC,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEM,YAA1B;AAAwC,MAAA,UAAU,EAAEN,YAAY,CAACwC,MAAjE;AAAyE,MAAA,QAAQ,EAAExB;AAAnF;AAAA;AAAA;AAAA;AAAA,YATpC,EAUCR,cAAc,IAAIR,YAAlB,iBAAkC,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAGU,eAAxB;AAAyC,MAAA,IAAI,EAAIQ,OAAjD;AAA0D,MAAA,IAAI,EAAGlB;AAAjE;AAAA;AAAA;AAAA;AAAA,YAVnC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA3GQD,I;;KAAAA,I;AA6GT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios, { AxiosResponse } from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport IndividualData from './Individualdata';\n\n\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`;\n\nfunction App2() {\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading,setLoading] = useState(false);\n\n  //as we are looking to start with the first page\n  const [ currentPage, setCurrentPage] = useState(1);\n\n  //setting the number of lists per page\n  const [postsperPage , setpostsPerPage] = useState(25);\n\n  //variables that help to display data about the selected request\n  //setting the initial value to false as we need to show the whole list at firs render\n  const [individualData , setindividualData] = useState(false);\n  const [indvidual_index , setindvidual_index] = useState(-1);\n\n  //to set error status , initially lets set that to false\n  const [errorstatus , seterrorstatus] = useState(false);\n  const[errormsg , seterrormsg] = useState('no error');\n\n  //change page\n  const paginate = (pageNumber : number) => setCurrentPage(pageNumber);\n  const getback = (val : boolean) =>{\n    setindividualData(val);\n  }\n\n  //sets the indexes for the item to be displayed\n  const getdata = (index : number) =>{\n    //set the value to true as we need to show details on a\n    //specific ticket\n    setindividualData(true);\n    \n    //setting the index of the requested ticket details\n    setindvidual_index(index);\n  }\n\n  useEffect(() => {\n    \n    //we can set the loading to true\n    setLoading(true);\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization,\n      },\n    })\n  \n      .then((response: AxiosResponse) => {\n        //console.log(\"Response receieved\"+response.data);\n        return response.data;\n      })\n\n      .then(odata =>{\n        setResponseData(odata);\n      })\n\n      //handling errors\n      .catch((error) => {\n        // Error\n        seterrorstatus (true);\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log(\"here\");\n            seterrormsg(' Observered an issue while retrieving data from server');\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the \n            // browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(\"there\");\n            console.log(error.request);\n            seterrormsg('Some issue with the request being made');\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n            seterrormsg('Unable to retrieve data please make sure you got everythin right');\n        }\n        console.log(error.config);\n      });\n      \n            \n     setLoading(false);    \n     \n     //setting the dependency array to empty\n  },[]);\n\n  const indexoflast = currentPage * postsperPage ;\n  const indexoffirst = indexoflast - postsperPage;\n\n  //lets slice the data by taking the first and last index\n  let currentPosts : string[] =  [];\n  if(responseData!=null){\n    currentPosts = responseData.slice(indexoffirst,indexoflast);\n  }\n  return (\n    <div className=\"container mt-5\">\n      {!errorstatus && !individualData && <h1 className= \"text-primary mb-3\"> \n        Ticket Requests\n      </h1>}\n      {!errorstatus && individualData && <h1 className= \"text-primary mb-3\"> \n        Ticket Details\n      </h1>}\n      {errorstatus && <h1 className = \"text-error mb-3\"> {errormsg} </h1>}\n    {!individualData && responseData && <List requests={currentPosts} loading ={loading} getdata ={getdata}></List>} \n    {!individualData && responseData && <Pagination postsperPage={postsperPage} totalPosts={responseData.length} paginate={paginate}></Pagination>}\n    {individualData && responseData && <IndividualData index ={indvidual_index} home = {getback} data ={responseData} ></IndividualData>} \n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}