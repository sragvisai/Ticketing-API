{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forkJoin = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar argsArgArrayOrObject_1 = require(\"../util/argsArgArrayOrObject\");\n\nvar innerFrom_1 = require(\"./innerFrom\");\n\nvar args_1 = require(\"../util/args\");\n\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\n\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\n\nvar createObject_1 = require(\"../util/createObject\");\n\nfunction forkJoin() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = args_1.popResultSelector(args);\n\n  var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args),\n      sources = _a.args,\n      keys = _a.keys;\n\n  var result = new Observable_1.Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop_1 = function (sourceIndex) {\n      var hasValue = false;\n      innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        return remainingCompletions--;\n      }, undefined, function () {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject_1.createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;\n}\n\nexports.forkJoin = forkJoin;","map":{"version":3,"sources":["../../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAyIA,SAAgB,QAAhB,GAAwB;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvB,MAAM,cAAc,GAAG,MAAA,CAAA,iBAAA,CAAkB,IAAlB,CAAvB;;AACM,MAAA,EAAA,GAA0B,sBAAA,CAAA,oBAAA,CAAqB,IAArB,CAA1B;AAAA,MAAQ,OAAO,GAAA,EAAA,CAAA,IAAf;AAAA,MAAiB,IAAI,GAAA,EAAA,CAAA,IAArB;;AACN,MAAM,MAAM,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,UAAC,UAAD,EAAW;AAC/B,QAAA,MAAM,GAAK,OAAO,CAAZ,MAAN;;AACR,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,UAAU,CAAC,QAAX;AACA;AACD;;AACD,QAAM,MAAM,GAAG,IAAI,KAAJ,CAAU,MAAV,CAAf;AACA,QAAI,oBAAoB,GAAG,MAA3B;AACA,QAAI,kBAAkB,GAAG,MAAzB;;4BACS,W,EAAW;AAClB,UAAI,QAAQ,GAAG,KAAf;AACA,MAAA,WAAA,CAAA,SAAA,CAAU,OAAO,CAAC,WAAD,CAAjB,EAAgC,SAAhC,CACE,IAAI,oBAAA,CAAA,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AACJ,YAAI,CAAC,QAAL,EAAe;AACb,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,kBAAkB;AACnB;;AACD,QAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,KAAtB;AACD,OARH,EASE,YAAA;AAAM,eAAA,oBAAA,EAAA;AAAsB,OAT9B,EAUE,SAVF,EAWE,YAAA;AACE,YAAI,CAAC,oBAAD,IAAyB,CAAC,QAA9B,EAAwC;AACtC,cAAI,CAAC,kBAAL,EAAyB;AACvB,YAAA,UAAU,CAAC,IAAX,CAAgB,IAAI,GAAG,cAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,MAAnB,CAAH,GAAgC,MAApD;AACD;;AACD,UAAA,UAAU,CAAC,QAAX;AACD;AACF,OAlBH,CADF;;;AAFF,SAAK,IAAI,WAAW,GAAG,CAAvB,EAA0B,WAAW,GAAG,MAAxC,EAAgD,WAAW,EAA3D,EAA6D;cAApD,W;AAwBR;AACF,GAlCc,CAAf;AAmCA,SAAO,cAAc,GAAG,MAAM,CAAC,IAAP,CAAY,kBAAA,CAAA,gBAAA,CAAiB,cAAjB,CAAZ,CAAH,GAAmD,MAAxE;AACD;;AAvCD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.forkJoin = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar argsArgArrayOrObject_1 = require(\"../util/argsArgArrayOrObject\");\nvar innerFrom_1 = require(\"./innerFrom\");\nvar args_1 = require(\"../util/args\");\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\nvar createObject_1 = require(\"../util/createObject\");\nfunction forkJoin() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = args_1.popResultSelector(args);\n    var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;\n    var result = new Observable_1.Observable(function (subscriber) {\n        var length = sources.length;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(length);\n        var remainingCompletions = length;\n        var remainingEmissions = length;\n        var _loop_1 = function (sourceIndex) {\n            var hasValue = false;\n            innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber, function (value) {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, function () { return remainingCompletions--; }, undefined, function () {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject_1.createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        };\n        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            _loop_1(sourceIndex);\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;\n}\nexports.forkJoin = forkJoin;\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"script"}