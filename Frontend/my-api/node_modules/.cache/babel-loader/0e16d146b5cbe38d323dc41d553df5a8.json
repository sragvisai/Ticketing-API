{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.range = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar empty_1 = require(\"./empty\");\n\nfunction range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    return empty_1.EMPTY;\n  }\n\n  var end = count + start;\n  return new Observable_1.Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n\n    subscriber.complete();\n  });\n}\n\nexports.range = range;","map":{"version":3,"sources":["../../../../src/internal/observable/range.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAqDA,SAAgB,KAAhB,CAAsB,KAAtB,EAAqC,KAArC,EAAqD,SAArD,EAA8E;AAC5E,MAAI,KAAK,IAAI,IAAb,EAAmB;AAEjB,IAAA,KAAK,GAAG,KAAR;AACA,IAAA,KAAK,GAAG,CAAR;AACD;;AAED,MAAI,KAAK,IAAI,CAAb,EAAgB;AAEd,WAAO,OAAA,CAAA,KAAP;AACD;;AAGD,MAAM,GAAG,GAAG,KAAK,GAAG,KAApB;AAEA,SAAO,IAAI,YAAA,CAAA,UAAJ,CACL,SAAS,GAEL,UAAC,UAAD,EAAW;AACT,QAAI,CAAC,GAAG,KAAR;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,YAAA;AACxB,UAAI,CAAC,GAAG,GAAR,EAAa;AACX,QAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,EAAjB;AACA,aAAK,QAAL;AACD,OAHD,MAGO;AACL,QAAA,UAAU,CAAC,QAAX;AACD;AACF,KAPM,CAAP;AAQD,GAZI,GAcL,UAAC,UAAD,EAAW;AACT,QAAI,CAAC,GAAG,KAAR;;AACA,WAAO,CAAC,GAAG,GAAJ,IAAW,CAAC,UAAU,CAAC,MAA9B,EAAsC;AACpC,MAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,EAAjB;AACD;;AACD,IAAA,UAAU,CAAC,QAAX;AACD,GArBA,CAAP;AAuBD;;AAtCD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.range = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar empty_1 = require(\"./empty\");\nfunction range(start, count, scheduler) {\n    if (count == null) {\n        count = start;\n        start = 0;\n    }\n    if (count <= 0) {\n        return empty_1.EMPTY;\n    }\n    var end = count + start;\n    return new Observable_1.Observable(scheduler\n        ?\n            function (subscriber) {\n                var n = start;\n                return scheduler.schedule(function () {\n                    if (n < end) {\n                        subscriber.next(n++);\n                        this.schedule();\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                });\n            }\n        :\n            function (subscriber) {\n                var n = start;\n                while (n < end && !subscriber.closed) {\n                    subscriber.next(n++);\n                }\n                subscriber.complete();\n            });\n}\nexports.range = range;\n//# sourceMappingURL=range.js.map"]},"metadata":{},"sourceType":"script"}