{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\n\nvar mergeAll_1 = require(\"./mergeAll\");\n\nvar args_1 = require(\"../util/args\");\n\nvar from_1 = require(\"../observable/from\");\n\nfunction merge() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = args_1.popScheduler(args);\n  var concurrent = args_1.popNumber(args, Infinity);\n  args = argsOrArgArray_1.argsOrArgArray(args);\n  return lift_1.operate(function (source, subscriber) {\n    mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}\n\nexports.merge = merge;","map":{"version":3,"sources":["../../../../src/internal/operators/merge.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAiBA,SAAgB,KAAhB,GAAqB;AAAI,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAkB;AAAlB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvB,MAAM,SAAS,GAAG,MAAA,CAAA,YAAA,CAAa,IAAb,CAAlB;AACA,MAAM,UAAU,GAAG,MAAA,CAAA,SAAA,CAAU,IAAV,EAAgB,QAAhB,CAAnB;AACA,EAAA,IAAI,GAAG,gBAAA,CAAA,cAAA,CAAe,IAAf,CAAP;AAEA,SAAO,MAAA,CAAA,OAAA,CAAQ,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,IAAA,UAAA,CAAA,QAAA,CAAS,UAAT,EAAqB,MAAA,CAAA,IAAA,CAAI,aAAA,CAAA,CAAE,MAAF,CAAA,EAAQ,MAAA,CAAM,IAAN,CAAR,CAAJ,EAAkD,SAAlD,CAArB,EAAmF,SAAnF,CAA6F,UAA7F;AACD,GAFM,CAAP;AAGD;;AARD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nvar lift_1 = require(\"../util/lift\");\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\nvar mergeAll_1 = require(\"./mergeAll\");\nvar args_1 = require(\"../util/args\");\nvar from_1 = require(\"../observable/from\");\nfunction merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args_1.popScheduler(args);\n    var concurrent = args_1.popNumber(args, Infinity);\n    args = argsOrArgArray_1.argsOrArgArray(args);\n    return lift_1.operate(function (source, subscriber) {\n        mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n    });\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"script"}