{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nsrag\\\\OneDrive\\\\Desktop\\\\Projects\\\\Zendesk\\\\my-api\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport List from './List';\nimport Pagination from './pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`; // Add a list of allowed origins.\n// If you have more origins you would like to add, you can add them to the array below.\n\nconst lst = [];\nlet desc = [];\n\nconst populateData = data => {\n  lst.push(data); //console.log(lst[0].count);\n};\n\nconst adddes = data => {\n  console.log(\"Inside the addess function and this the data that we got:- \" + data);\n  let len = 0;\n\n  if (data != null) {\n    len = data.length;\n  }\n\n  console.log(\"The length of the retrieved array is\" + len);\n\n  if (len > 25) {\n    console.log(\"We do have a lot of stuff here dudee...\");\n  }\n};\n\nlet count = 0;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: \"\"\n    };\n  }\n\n  callAPI() {\n    console.log(\"Inside the call Api\");\n    fetch(\"http://localhost:9000/test\").then(res => res.text()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n\n  componentWillMount() {\n    console.log(\"Inside the component mount\");\n    this.callAPI();\n  }\n\n}\n\nfunction App2() {\n  _s();\n\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading, setLoading] = useState(false); //as we are looking to start with the first page\n\n  const [currentPage, setCurrentPage] = useState(1); //setting the number of lists per page\n\n  const [postsperPage, setpostsPerPage] = useState(25);\n  let [responseCount, setResponseCount] = React.useState(''); //change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  useEffect(() => {\n    //we can set the loading to true\n    setLoading(true);\n    console.log(\"Inside the getdata\");\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization\n      }\n    }).then(response => {\n      return response.data;\n    }).then(odata => {\n      //trying passing the array here itself\n      setResponseData(odata.tickets); //console.log(responseData);\n    });\n    setLoading(false); //setting the dependemcy array to empty\n  }, []); //adddes(responseData);\n  //get current page posts\n\n  const indexoflast = currentPage * postsperPage;\n  const indexoffirst = indexoflast - postsperPage;\n  let currentPosts = [];\n\n  if (responseData != null) {\n    currentPosts = responseData.slice(indexoffirst, indexoflast);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-primary mb-3\",\n      children: \"Ticket Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: this.state.apiResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), responseData && /*#__PURE__*/_jsxDEV(List, {\n      requests: currentPosts,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsperPage: postsperPage,\n      totalPosts: responseData.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App2, \"ctXUn3UADmAcFGYKQF9LCgFcq4E=\");\n\n_c = App2;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["C:/Users/nsrag/OneDrive/Desktop/Projects/Zendesk/my-api/src/App.tsx"],"names":["React","useState","useEffect","axios","List","Pagination","username","password","encodedBase64Token","Buffer","from","toString","authorization","lst","desc","populateData","data","push","adddes","console","log","len","length","count","App","Component","constructor","props","state","apiResponse","callAPI","fetch","then","res","text","setState","componentWillMount","App2","responseData","setResponseData","loading","setLoading","currentPage","setCurrentPage","postsperPage","setpostsPerPage","responseCount","setResponseCount","paginate","pageNumber","get","headers","Authorization","response","odata","tickets","indexoflast","indexoffirst","currentPosts","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { User } from \"./interfaces\";\nimport axios, { AxiosResponse } from \"axios\";\nimport express, { response } from 'express';\nimport cors from 'cors';\nimport ReactDOM from 'react-dom';\nimport List from './List';\nimport Pagination from './pagination';\n\n\nconst username = 'nsragvi@gmail.com';\nconst password = 'Anasuya@97';\nconst encodedBase64Token = Buffer.from(`${username}:${password}`).toString('base64');\nconst authorization = `Basic ${encodedBase64Token}`;\n\n\n// Add a list of allowed origins.\n// If you have more origins you would like to add, you can add them to the array below.\nconst lst: any[] = [];\nlet desc: string[] = [];\nconst populateData = (data: any) => {\n  lst.push(data);\n  //console.log(lst[0].count);\n}\nconst adddes = (data: any) => {\n \n  console.log(\"Inside the addess function and this the data that we got:- \" +data);\n    let len = 0;\n  if(data!=null){\n   len = data.length;\n  }\n  console.log(\"The length of the retrieved array is\"+len);\n\n  if(len > 25)\n\n  {\n    console.log(\"We do have a lot of stuff here dudee...\");\n  }\n\n\n\n\n}\n\nlet count = 0;\n\nclass App extends React.Component {\n\n  constructor(props : Object){\n    super(props);\n    this.state = {apiResponse: \"\"}\n  }\n\n  callAPI(){\n    console.log(\"Inside the call Api\");\n    fetch(\"http://localhost:9000/test\")\n    .then(res => res.text())\n    .then(res => this.setState({apiResponse:res}));\n  }\n\n  componentWillMount(){\n    console.log(\"Inside the component mount\");\n    this.callAPI();\n  }\n\n}\nfunction App2(this: any) {\n  //const count = 0;\n  const [responseData, setResponseData] = React.useState([]);\n  const [loading,setLoading] = useState(false);\n  //as we are looking to start with the first page\n  const [ currentPage, setCurrentPage] = useState(1);\n  //setting the number of lists per page\n  const [postsperPage , setpostsPerPage] = useState(25); \n  let [responseCount, setResponseCount] = React.useState('');\n  \n  //change page\n  const paginate = (pageNumber : number) => setCurrentPage(pageNumber);\n\n  useEffect(() => {\n    \n    //we can set the loading to true\n    setLoading(true);\n    console.log(\"Inside the getdata\");\n    axios.get('http://localhost:9000/test', {\n      headers: {\n        Authorization: authorization,\n      },\n    })\n  \n      .then((response: AxiosResponse) => {\n        return response.data;\n      })\n      .then(odata =>{\n        //trying passing the array here itself\n        setResponseData(odata.tickets);\n        //console.log(responseData);\n      });\n     setLoading(false);\n     \n     //setting the dependemcy array to empty\n  },[]);\n\n  //adddes(responseData);\n\n  //get current page posts\n\n  const indexoflast = currentPage * postsperPage ;\n\n  const indexoffirst = indexoflast - postsperPage;\n  let currentPosts : string[] =  [];\n  if(responseData!=null){\n    currentPosts = responseData.slice(indexoffirst,indexoflast);\n  }\n  return (\n    <div className=\"container mt-5\">\n      <h1 className= \"text-primary mb-3\"> \n        Ticket Requests\n      </h1>\n      <p>{this.state.apiResponse}</p>\n    {responseData && <List requests={currentPosts} loading ={loading}></List>} \n    <Pagination postsperPage={postsperPage} totalPosts={responseData.length} paginate={paginate}></Pagination> \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}